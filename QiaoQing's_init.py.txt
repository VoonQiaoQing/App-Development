from flask import Flask,render_template,request, redirect, url_for, send_from_directory, flash, session
#session
import imghdr
import os
from flask_uploads import configure_uploads, patch_request_class
from EditMovies import UpdateMoviesForm, photos
from EditRooms import CreateRoomsForm
from Forms import CreateUserForm,LoginForm, RegisterForm
import shelve, RoomInfo, MovieInfo, UserId, User
    #HomeInfo
from werkzeug.utils import secure_filename
from werkzeug.datastructures import CombinedMultiDict
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, UserMixin

basedir = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
app.config['SECRET_KEY'] = 'I have a dream'
app.config['UPLOADED_PHOTOS_DEST'] = os.path.join(basedir, 'uploads')
app.config['UPLOAD_EXTENSIONS'] = ['.jfif','.webp','.jpg','.png','.gif']
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

configure_uploads(app, photos)
patch_request_class(app)

class CuUser(UserMixin):
    id = 0

    def __init__(self, username, gender, email, password):
        CuUser.id += 1
        self.id = CuUser.id
        self.username = username
        self.gender = gender
        self.email = email
        self.password = password

    def set_username(self, username):
        self.username = username

    def get_username(self):
        return self.username

    def set_gender(self, gender):
        self.gender = gender

    def get_gender(self):
        return self.gender

    def set_email(self, email):
        self.email = email

    def get_email(self):
        return self.email

    def set_password(self, password):
        self.password = password

    def get_password(self):
        return self.password

    def __repr__(self):
        return f'<CuUser: {self.username}>'

@login_manager.user_loader
def load_user(user_id):
    return CuUser.get_id(user_id)

@app.route('/register', methods=['GET', 'POST'])
def register():
    register_form = RegisterForm(request.form)
    if request.method == 'POST' and register_form.validate():
        users_dict = {}
        db = shelve.open('users.db', 'c')
        try:
            users_dict = db['Users']
        except:
            print('Error in retrieving Users from users.db')

        email = register_form.email.data
        if email in users_dict:
            flash('You have already registered with the existing email.', 'Danger')
            return redirect(url_for('login'))
        else:
            hashed_password = generate_password_hash(register_form.password.data, method='sha256')
            user = CuUser(
                register_form.username.data,
                register_form.gender.data,
                register_form.email.data,
                hashed_password)
            users_dict[int(user.get_id())] = user
            db['Users'] = users_dict

            db.close()
            flash('You have successfully registered', 'success')

            return redirect(url_for('login'))
    return render_template('register.html', form=register_form)


@app.route('/profile')
def profile():
    users_dict = {}
    db = shelve.open('users.db', 'r')
    users_dict = db['Users']
    db.close()

    users_list = []
    for key in users_dict:
        user = users_dict.get(key)
        users_list.append(user)
    return render_template('profile.html', count=len(users_list), users_list=users_list)


@app.route('/login', methods=['GET', 'POST'])
def login():
    login_form = LoginForm(request.form)
    if request.method == 'POST' and login_form.validate():
        users_dict = {}
        db = shelve.open('users.db',  'r')
        users_dict = db['Users']
        db.close()
        users_list = []
        for id in users_dict:
            user = users_dict.get(id)
            users_list.append(user)
        for user in users_list:
            if user.email == login_form.email.data:
                password = generate_password_hash(login_form.password.data, method='sha256')
                check_password_hash(user.password, password)
                session['id'] = True
                session['login'] = user.id
                session['loggedIn'] = user.username
                return redirect(url_for('home'))
    return render_template('login.html', form=login_form)


@app.route('/update/<int:id>/', methods=['GET', 'POST'])
def update(id):

    update_form = RegisterForm(request.form)
    if request.method == 'POST':
        users_dict = {}
        db = shelve.open('users.db', 'w')
        users_dict = db['Users']

        user = users_dict.get(id)
        user.username = update_form.username.data
        user.email = update_form.email.data
        user.gender = update_form.gender.data

        db['Users'] = users_dict
        db.close()
        return redirect(url_for('profile'))

    else:
        users_dict = {}
        db = shelve.open('users.db', 'r')
        users_dict = db['Users']
        db.close()

        user = users_dict.get(id)
        update_form.username.data = user.username
        update_form.email.data = user.email
        update_form.gender.data = user.gender

        return render_template('update.html', form=update_form)


@app.route('/delete/<int:id>', methods=['POST'])
def delete(id):
    users_dict = {}
    db = shelve.open('users.db', 'w')
    users_dict = db['Users']

    users_dict.pop(id)

    db['Users'] = users_dict
    db.close()
    session.pop('login')
    return redirect(url_for('home'))


@app.route('/logout')
def logout():
    session.pop('login')
    return redirect(url_for('home'))


def validate_image(stream):
    header = stream.read(512)
    stream.seek(0)
    format = imghdr.what(None, header)
    if not format:
        return None
    return '.' + (format if format != 'jpeg' else 'jpg')

@app.errorhandler(413)
def too_large(e):
    return "File is too large", 413

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/Purchase')
def Purchase():
    return render_template('moviesstaff.html')

#moviesstaff - retrieve page
#staff_list â€“ The 'staff_list list' will be used in the Retrieve Users template
# to retrieve and display the details of all the user objects that
# were stored in the users_dict dictionary that was stored in shelve.

@app.route('/EditRooms', methods=['GET', 'POST'])
def EditRooms():
    room_form = CreateRoomsForm(CombinedMultiDict((request.files, request.form)))
#    file_url = send_from_directory(app.config['UPLOAD_FOLDER'],filename)
    if room_form.validate():
        filename1 = secure_filename(room_form.small_roomimage1.data.filename)
        filename2 = secure_filename(room_form.small_roomimage2.data.filename)
        filename3 = secure_filename(room_form.med_roomimage.data.filename)
        filename4 = secure_filename(room_form.large_roomimage1.data.filename)
        filename5 = secure_filename(room_form.large_roomimage2.data.filename)

        if filename1 != '' or filename2 != '' or filename3 != '' or filename4 != '' or filename5 != '':
            file_ext1 = os.path.splitext(filename1)[1]
            file_ext2 = os.path.splitext(filename2)[1]
            file_ext3 = os.path.splitext(filename3)[1]
            file_ext4 = os.path.splitext(filename4)[1]
            file_ext5 = os.path.splitext(filename5)[1]

            if file_ext1 not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext1 != validate_image(room_form.small_roomimage1.data.stream):
                return "Invalid Image",400
            elif file_ext2 not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext2 != validate_image(room_form.small_roomimage2.data.stream):
                return "Invalid Image",400
            elif file_ext3 not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext3 != validate_image(room_form.med_roomimage.data.stream):
                return "Invalid Image",400
            elif file_ext4 not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext4 != validate_image(room_form.large_roomimage1.data.stream):
                return "Invalid Image",400
            elif file_ext5 not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext5 != validate_image(room_form.large_roomimage2.data.stream):
                return "Invalid Image",400
            else:
                room_form.small_roomimage1.data.save(os.path.join(basedir, 'uploads', filename1))
                room_form.small_roomimage1.data.save(os.path.join(basedir, 'uploads', filename2))
                room_form.med_roomimage.data.save(os.path.join(basedir, 'uploads', filename3))
                room_form.large_roomimage1.data.save(os.path.join(basedir, 'uploads', filename4))
                room_form.large_roomimage2.data.save(os.path.join(basedir, 'uploads', filename5))

                roominfo_dict = {}
                db = shelve.open('roominfostorage.db', 'c')

                try:
                    roominfo_dict = db['RoomInfo']
                except:
                    print("Error in retrieving Staff from storage.db.")

                roominfo = RoomInfo.RoomInfo(room_form.room_title.data, room_form.small_roominfo.data,
                                             filename1,
                                             filename2,
                                            room_form.med_roominfo.data,
                                             filename3,
                                            room_form.large_roominfo.data,
                                             filename4,
                                             filename5,
                                            room_form.gvexclusiveinfo.data)

                roominfo_dict[roominfo.get_staff_id()] = roominfo
                db['RoomInfo'] = roominfo_dict

            # Test codes
            roominfo_dict = db['RoomInfo'] #Value of Staff Key in Storage
            roominfo = roominfo_dict[roominfo.get_staff_id()] #value of Value of Staff Key in Storage
            print("was stored in storage.mb successfully with user_id ==", roominfo.get_staff_id())

            db.close()
        return redirect(url_for('home'))
    return render_template('editRooms.html', form=room_form)

@app.route('/ChooseMovies')
def ChooseMovies():
    movieinfo_dict = {}
    db = shelve.open('movieinfostorage.db', 'r')
    movieinfo_dict = db['MovieInfo']
    db.close()

    movieinfo_list = []
    for key in movieinfo_dict:
        movieinfo = movieinfo_dict.get(key)
        movieinfo_list.append(movieinfo)

    return render_template('chooseMovies.html', movieinfo_list=movieinfo_list)

@app.route('/CreateMovies', methods=['GET', 'POST'])
def CreateMovies(): #(filename?)
    create_movieform = UpdateMoviesForm(CombinedMultiDict((request.files, request.form)))
#    file_url = send_from_directory(app.config['UPLOAD_FOLDER'],filename)
    if create_movieform.validate():
        filename = secure_filename(create_movieform.movie_image.data.filename)

        if filename != '':
            file_ext = os.path.splitext(filename)[1]
            if file_ext not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext != validate_image(create_movieform.movie_image.data.stream):
                return "Invalid Image",400
            else:
                create_movieform.movie_image.data.save(os.path.join(basedir, 'uploads', filename))

                movieinfo_dict = {}
                db = shelve.open('movieinfostorage.db', 'c')

                try:
                    movieinfo_dict = db['MovieInfo']
                except:
                    print("Error in retrieving Movies from movieinfostorage.db.")

                movieinfo = MovieInfo.MovieInfo(
                                            filename,
                                            create_movieform.movie_name.data,
        #                                    create_movieform.movie_image.data,
                                            create_movieform.movieagerating.data,
                                            create_movieform.movieduration.data,
                                            create_movieform.gvexclusivetag.data,
                                            create_movieform.movieHorror.data,
                                            create_movieform.movieDrama.data,
                                            create_movieform.movieComedy.data,
                                            create_movieform.movieScience.data,
                                            create_movieform.movieRomance.data,
                                            create_movieform.movieAnimation.data,
                                            create_movieform.movieCrimeFilm.data,
                                            create_movieform.movieThriller.data,
                                            create_movieform.movieAdventure.data,
                                            create_movieform.movieEmotional.data,
                                            create_movieform.movieMystery.data,
                                            create_movieform.movieAction.data)

                if len(movieinfo_dict) == 0:
                    currentmovieid = 1
                else: #1:movieinfo
                    last = list(movieinfo_dict.keys())[-1]
                    currentmovieid = last + 1

                movieinfo.set_movie_id(currentmovieid)
                movieinfo_dict[movieinfo.get_movie_id()] = movieinfo
                db['MovieInfo'] = movieinfo_dict

            # Test codes
            movieinfo_dict = db['MovieInfo'] #Value of Staff Key in Storage
            movieinfo = movieinfo_dict[movieinfo.get_movie_id()] #value of Value of Staff Key in Storage
            print("was stored in storage.mb successfully with user_id ==", movieinfo.get_movie_id())

            db.close()
        return redirect(url_for('moviesstaff', filename=filename))
    return render_template('createMovie.html', form=create_movieform)

@app.route('/UpdateMovie/<int:id>/', methods=['GET', 'POST'])
def UpdateMovie(id):
    update_movieform = UpdateMoviesForm(CombinedMultiDict((request.files, request.form)))
    if update_movieform.validate():
        filename = secure_filename(update_movieform.movie_image.data.filename)
        if filename != '':
            file_ext = os.path.splitext(filename)[1]
            if file_ext not in app.config['UPLOAD_EXTENSIONS'] or \
                    file_ext != validate_image(update_movieform.movie_image.data.stream):
                return "Invalid Image",400
            else:
                update_movieform.movie_image.data.save(os.path.join(basedir, 'uploads', filename))

                movieinfo_dict = {}
                db = shelve.open('movieinfostorage.db', 'w')
                movieinfo_dict = db['MovieInfo']

                movie = movieinfo_dict.get(id)
                print(movie)
                movie.set_movieimage(filename)
                movie.set_moviename(update_movieform.movie_name.data)
                movie.set_movieagerating(update_movieform.movieagerating.data)
                movie.set_movieduration(update_movieform.movieduration.data)
                movie.set_gvexclusivetag(update_movieform.gvexclusivetag.data)
                movie.set_movieHorror(update_movieform.movieHorror.data)
                movie.set_movieDrama(update_movieform.movieDrama.data)
                movie.set_movieComedy(update_movieform.movieComedy.data)
                movie.set_movieScience(update_movieform.movieScience.data)
                movie.set_movieRomance(update_movieform.movieRomance.data)
                movie.set_movieAnimation(update_movieform.movieAnimation.data)
                movie.set_movieCrimeFilm(update_movieform.movieCrimeFilm.data)
                movie.set_movieThriller(update_movieform.movieThriller.data)
                movie.set_movieAdventure(update_movieform.movieAdventure.data)
                movie.set_movieEmotional(update_movieform.movieEmotional.data)
                movie.set_movieMystery(update_movieform.movieMystery.data)
                movie.set_movieAction(update_movieform.movieAction.data)

                db['MovieInfo'] = movieinfo_dict
                db.close()
                return redirect(url_for('moviesstaff'))

    else:
        movieinfo_dict = {}
        db = shelve.open('movieinfostorage.db', 'r')
        movieinfo_dict = db['MovieInfo']
        db.close()

        movie = movieinfo_dict.get(id)
        update_movieform.movie_image.data = movie.get_movieimage()
        update_movieform.movie_name.data = movie.get_moviename()
#        update_movieform.movie_image.data = movie.get_movie_image()
        update_movieform.movieagerating.data = movie.get_movieagerating()
        update_movieform.movieduration.data = movie.get_movieduration()
        update_movieform.gvexclusivetag.data = movie.get_gvexclusivetag()
        update_movieform.movieHorror.data = movie.get_movieHorror()
        update_movieform.movieDrama.data = movie.get_movieDrama()
        update_movieform.movieComedy.data = movie.get_movieComedy()
        update_movieform.movieScience.data = movie.get_movieScience()
        update_movieform.movieRomance.data = movie.get_movieRomance()
        update_movieform.movieAnimation.data = movie.get_movieAnimation()
        update_movieform.movieCrimeFilm.data = movie.get_movieCrimeFilm()
        update_movieform.movieThriller.data = movie.get_movieThriller()
        update_movieform.movieAdventure.data = movie.get_movieAdventure()
        update_movieform.movieEmotional.data = movie.get_movieEmotional()
        update_movieform.movieMystery.data = movie.get_movieMystery()
        update_movieform.movieAction.data = movie.get_movieAction()

        return render_template('updateMovie.html', form=update_movieform)

def joinPath(param, file):
    pass

@app.route('/Filter')
def moviesfilter():
    movieinfo_dict = {}
    db = shelve.open('movieinfostorage.db', 'r')
    movieinfo_dict = db['MovieInfo']
    db.close()

    roominfo_dict = {}
    db = shelve.open('roominfostorage.db', 'r')
    roominfo_dict = db['RoomInfo']
    db.close()

    movieinfo_list = []
    for key in movieinfo_dict:
        movieinfo = movieinfo_dict.get(key)
        movieinfo_list.append(movieinfo)

    roominfo_list = []
    for key in roominfo_dict:
        roominfo = roominfo_dict.get(key)
        roominfo_list.append(roominfo)

    image_list = os.listdir(app.config['UPLOADED_PHOTOS_DEST'])
    print(image_list)
    return render_template('moviesfilter.html', movieinfo_list=movieinfo_list,  roominfo_list=roominfo_list, image_list=image_list)

def LoginedUser():
    LoginedUser_dict = {}
    loginuser = shelve.open('loginuserstorage.db', 'c')

    try:
        LoginedUser_dict = loginuser['Users']
    except:
        print('Error in retrieving Users from storage.db.')

    LoginedUserID = UserId.UserId("Staff")
    LoginedUser_dict[LoginedUserID.get_UserID()] = LoginedUserID
    loginuser['Users'] = LoginedUser_dict

    # Test codes
    LoginedUser_dict = loginuser['Users']
    LoginedUserID = LoginedUser_dict[LoginedUserID.get_UserID()]
    print(LoginedUserID.get_UserID(), 'was stored in storage.db successfully with user_id ==', LoginedUserID.get_UserID())
    loginuser.close()

#LoginedUser()

@app.route('/MoviesCustomer')
def moviescustomer():
    movieinfo_dict = {}
    db = shelve.open('movieinfostorage.db', 'r')
    movieinfo_dict = db['MovieInfo']
    db.close()

    roominfo_dict = {}
    db = shelve.open('roominfostorage.db', 'r')
    roominfo_dict = db['RoomInfo']
    db.close()

#    userinfo_dict = {}
#    db = shelve.open('loginuserstorage.db', 'r')
#    userinfo_dict = db['RoomInfo']
#    db.close()

    # userinfo_list = []
    # for key in userinfo_dict:
    #     userinfo = userinfo_dict.get(key)
    #     userinfo_list.append(userinfo)

    movieinfo_list = []
    for key in movieinfo_dict:
        movieinfo = movieinfo_dict.get(key)
        movieinfo_list.append(movieinfo)

    roominfo_list = []
    for key in roominfo_dict:
        roominfo = roominfo_dict.get(key)
        roominfo_list.append(roominfo)

#   basedir = os.path.abspath(os.path.dirname(__file__))
#   app.config['UPLOADED_PHOTOS_DEST'] = os.path.join(basedir, 'uploads')

#maybe use dict?
    image_list = os.listdir(app.config['UPLOADED_PHOTOS_DEST'])
    print(image_list)
    return render_template('moviescustomer.html', moviecount=len(movieinfo_list)
                           ,roomcount=len(roominfo_list) ,imagecount=len(image_list)
                           ,movieinfo_list=movieinfo_list ,roominfo_list=roominfo_list
                           ,image_list=image_list)

@app.route('/MoviesStaff')
def moviesstaff():
    movieinfo_dict = {}
    db = shelve.open('movieinfostorage.db', 'r')
    movieinfo_dict = db['MovieInfo']
    db.close()

    roominfo_dict = {}
    db = shelve.open('roominfostorage.db', 'r')
    roominfo_dict = db['RoomInfo']
    db.close()

    movieinfo_list = []
    for key in movieinfo_dict:
        movieinfo = movieinfo_dict.get(key)
        movieinfo_list.append(movieinfo)

    roominfo_list = []
    for key in roominfo_dict:
        roominfo = roominfo_dict.get(key)
        roominfo_list.append(roominfo)

#   basedir = os.path.abspath(os.path.dirname(__file__))
#   app.config['UPLOADED_PHOTOS_DEST'] = os.path.join(basedir, 'uploads')

#maybe use dict?
    image_list = os.listdir(app.config['UPLOADED_PHOTOS_DEST'])
    print(image_list)
    return render_template('moviesstaff.html', moviecount=len(movieinfo_list) , roomcount=len(roominfo_list) ,imagecount=len(image_list) ,movieinfo_list=movieinfo_list,  roominfo_list=roominfo_list, image_list=image_list)

@app.route('/MoviesStaff/<filename>')
def send_image(filename):
    return send_from_directory("uploads",filename)

@app.route('/DeleteMovie/<int:id>/', methods=['POST'])
def DeleteMovie(id):
    movieinfo_dict = {}
    db = shelve.open('movieinfostorage.db', 'w')
    movieinfo_dict = db['MovieInfo']

    movieinfo_dict.pop(id)

    db['MovieInfo'] = movieinfo_dict
    db.close()

#movie_id = 1,2,3
#image_list = [1,2,3]
#if image in the middle of the folder is deleted,
#positions will be complicated.
#store filename in dict to persist position
#    newid = id
#    os.remove(os.path.join(app.config['UPLOADED_ITEMS_DEST'], filename))
    return redirect(url_for('moviesstaff'))

@app.route('/contactUs')
def contact_us():
    return render_template('contactUs.html')

@app.route('/createQuestion', methods=['GET', 'POST'])
def create_question():
    create_user_form = CreateUserForm(request.form)
    if request.method == 'POST' and create_user_form.validate():
        users_dict = {}
        db = shelve.open('storage.db', 'c')
        try:
            users_dict = db['Users']
        except:
            print("Error in retrieving Users from storage.db.")

        user = User.User(create_user_form.Question.data, create_user_form.Answer.data, create_user_form.Availability.data, create_user_form.NumberOfPeople.data, create_user_form.remarks.data)
        users_dict[user.get_user_id()] = user
        db['Users'] = users_dict
        db.close()

        return redirect(url_for('retrieve_questions'))
    return render_template('createQuestion.html', form=create_user_form)

@app.route('/retrieveQuestion')
def retrieve_questions():
    users_dict = {}
    db = shelve.open('storage.db', 'r')
    users_dict = db['Users']
    db.close()

    users_list = []
    for key in users_dict:
        user = users_dict.get(key)
        users_list.append(user)

    return render_template('retrieveQuestions.html',count=len(users_list), users_list=users_list)


@app.route('/updateQuestion/<int:id>/', methods=['GET', 'POST'])
def update_user(id):
    update_user_form = CreateUserForm(request.form)
    if request.method == 'POST' and update_user_form.validate():
        users_dict = {}
        db = shelve.open('storage.db', 'w')
        users_dict = db['Users']

        user = users_dict.get(id)
        user.set_Question(update_user_form.Question.data)
        user.set_Answer(update_user_form.Answer.data)
        user.set_Availability(update_user_form.Availability .data)
        user.set_NumberOfPeople(update_user_form.NumberOfPeople.data)
        user.set_remarks(update_user_form.remarks.data)

        db['Users'] = users_dict
        db.close()

        return redirect(url_for('retrieve_questions'))
    else:
        users_dict = {}
        db = shelve.open('storage.db', 'r')
        users_dict = db['Users']
        db.close()

        user = users_dict.get(id)
        update_user_form.Question.data = user.get_Question()
        update_user_form.Answer.data = user.get_Answer()
        update_user_form.Availability.data = user.get_Availability()
        update_user_form.NumberOfPeople.data = user.get_NumberOfPeople()
        update_user_form.remarks.data = user.get_remarks()

        return render_template('updateQuestions.html', form=update_user_form)

@app.route('/deleteUser/<int:id>', methods=['POST'])
def delete_user(id):
        users_dict = {}
        db = shelve.open('storage.db', 'w')
        users_dict = db['Users']

        users_dict.pop(id)

        db['Users'] = users_dict
        db.close()

        return redirect(url_for('retrieve_questions'))

if __name__ == '__main__':
    app.run(debug=True)
